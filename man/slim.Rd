% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compilation.R
\name{slim}
\alias{slim}
\title{Run a slendr model in SLiM}
\usage{
slim(
  model,
  sequence_length,
  recombination_rate,
  output = file.path(model$path, "output"),
  spatial = !is.null(model$world),
  sampling = NULL,
  max_attempts = 1,
  save_locations = FALSE,
  coalescent_only = TRUE,
  method = c("batch", "gui"),
  verbose = FALSE,
  burnin = 0,
  random_seed = NULL,
  slim_path = NULL,
  save_sampling = TRUE
)
}
\arguments{
\item{model}{Model object created by the \code{compile} function}

\item{sequence_length}{Total length of the simulated sequence (in base-pairs)}

\item{recombination_rate}{Recombination rate of the simulated sequence (in
recombinations per basepair per generation)}

\item{output}{A shared prefix path of output files that will be generated by
the model (by default, all files will share a prefix \code{"output"} and
will be placed in the model directory)}

\item{spatial}{Should the model be executed in spatial mode? By default, if a
world map was specified during model definition, simulation will proceed in
a spatial mode.}

\item{sampling}{A data frame of times at which a given number of individuals
should be remembered in the tree-sequence (see \code{sampling} for a
function that can generate the sampling schedule in the correct format). If
missing, only individuals present at the end of the simulation will be
recorded in the tree-sequence output file.}

\item{max_attempts}{How many attempts should be made to place an offspring
near one of its parents? Serves to prevent infinite loops on the SLiM
backend. Default value is 100.}

\item{save_locations}{Save location of each individual throughout the
simulation?}

\item{coalescent_only}{Should \code{initializeTreeSeq(retainCoalescentOnly =
  <...>)} be set to \code{TRUE} (the default) or \code{FALSE}? See
"retainCoalescentOnly" in the SLiM manual for more detail.}

\item{method}{How to run the script? ("gui" - open in SLiMgui, "batch" - run
on the command-line)}

\item{verbose}{Write the SLiM output log to the console (default
\code{FALSE})?}

\item{burnin}{Length of the burnin (in model's time units, i.e. years)}

\item{random_seed}{Random seed (if missing, SLiM's own seed will be used)}

\item{slim_path}{Optional way to specify path to an appropriate SLiM binary}

\item{save_sampling}{Save the sampling schedule table together with other
output files? If \code{FALSE} (default), the sampling table will be saved
to a temporary directory.}
}
\value{
No return value. Simulation output is saved to disk in the form of
a tree-sequence file.
}
\description{
This function will execute a SLiM script generated by the \code{compile}
function during the compilation of a slendr demographic model.
}
\examples{
\dontshow{check_dependencies(python = TRUE, slim = TRUE) # make sure dependencies are present
}
# load an example model
model <- read_example("introgression")

# afr and eur objects would normally be created before slendr model compilation,
# but here we take them out of the model object already compiled for this
# example (in a standard slendr simulation pipeline, this wouldn't be necessary)
afr <- model$populations[["AFR"]]
eur <- model$populations[["EUR"]]
chimp <- model$populations[["CH"]]

# schedule the sampling of a couple of ancient and present-day individuals
# given model at 20 ky, 10 ky, 5ky ago and at present-day (time 0)
modern_samples <- schedule_sampling(model, times = 0, list(afr, 5), list(eur, 5), list(chimp, 1))
ancient_samples <- schedule_sampling(model, times = c(30000, 20000, 10000), list(eur, 1))

# sampling schedules are just data frames and can be merged easily
samples <- rbind(modern_samples, ancient_samples)

# run a simulation using the SLiM back end from a compiled slendr model object
slim(model, sequence_length = 1e5, recombination_rate = 0, sampling = samples, verbose = TRUE)
}
